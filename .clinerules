# Others
- ask permission for approval when running npm run dev

# Security

## Sensitive Files
DO NOT read or modify:
- .env files
- **/config/secrets.*
- **/*.pem
- Any file containing API keys, tokens, or credentials

## Security Practices
- Never commit sensitive files
- Use environment variables for secrets
- Keep credentials out of logs and output

# Tech Stack

## Core Dependencies
- Next.js 14.x
- React 18.x
- TypeScript 5.x
- Node.js 20.x or higher

## UI Libraries
- Tailwind CSS 3.x
- Radix UI components
- shadcn/ui components
- Lucide React icons

## Content Management
- Markdown with gray-matter for blog content
- markdown-it for MD parsing

# Code Style & Standards

## TypeScript
- Strict mode enabled
- Use ES2017 target
- Follow tsconfig paths aliases (@/* for src directory)
- No JavaScript files (.js/.jsx) - TypeScript only

## ESLint
- Extend Next.js core web vitals
- Follow Next.js TypeScript rules
- Run linting before commits

## Component Structure
- Use .tsx extension for all React components
- Follow Next.js 14 App Router conventions
- Keep components in src/components directory
- UI components in src/components/ui
- Page components in src/app directory

## Styling
- Use Tailwind CSS for styling
- Follow design system color tokens (see tailwind.config.ts)
- Use CSS variables for theme values
- Maintain responsive design (mobile-first)
- Use container queries where appropriate

# Architecture Guidelines

## File Organization
- /src/app - Next.js pages and routes
- /src/components - Reusable React components
- /src/content - Markdown content
- /src/lib - Utility functions and helpers
- /public - Static assets

## Component Guidelines
- Use functional components with TypeScript
- Implement proper prop typing
- Keep components focused and single-responsibility
- Use composition over inheritance
- Implement error boundaries where necessary
- Create modular, reusable components
- Break down complex components into smaller, manageable pieces
- Follow the Single Responsibility Principle
- Ensure components are self-contained and independent
- Use props and interfaces to define clear component contracts

## State Management
- Use React hooks for local state
- Implement proper data fetching patterns
- Follow Next.js data fetching best practices
- Use server components where possible

# Performance & Best Practices

## Build Optimization
- Implement proper image optimization
- Use Next.js built-in performance features
- Minimize bundle size
- Implement proper code splitting

## Accessibility
- Follow WCAG guidelines
- Use semantic HTML
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Maintain proper color contrast

## Image Accessibility
- All content images must have descriptive alt text
- Decorative images must use empty alt text (alt="")
- CSS background images must have appropriate ARIA attributes
- Icons used as links or buttons must have screen reader text
- Dynamic images should use meaningful alt text (e.g., post.title)
- Follow alt text guidelines in docs/accessibility-guidelines.md
- Maximum alt text length should be 125 characters
- Don't use phrases like "image of" or "picture of" in alt text
- Include any text that appears within images in the alt text

## SEO
- Implement proper meta tags
- Use semantic HTML structure
- Follow Next.js SEO best practices
- Implement proper Open Graph tags
- Implement Schema markup (JSON-LD) for all pages
- Use appropriate Schema types for different page types:
  - Organization and Website schema for global layout
  - BlogPosting schema for blog posts
  - Service schema for service pages
  - AboutPage schema for about pages
  - ContactPage schema for contact pages
  - BreadcrumbList schema for navigation paths
- Configure schema data in src/lib/schema-config.ts
- Use reusable schema components from src/components/schema/
- Validate schema markup using Google's Structured Data Testing Tool

## Robots.txt Implementation
- Use Next.js App Router's robots.ts file for robots.txt generation
- Do not create static robots.txt files in the public directory
- Disable robots.txt generation in next-sitemap.config.js
- Include all necessary directives in robots.ts:
  - User-agent rules (allow/disallow paths)
  - Host directive pointing to the baseUrl
  - References to all sitemaps
- Disallow crawling of sensitive paths (/api/, /admin/)
- Update robots.ts when adding new paths that should be disallowed
- Test robots.txt implementation using search engine tools

## XML Sitemap
- Maintain XML sitemaps for all site content
- Use next-sitemap for sitemap generation
- Include all dynamic routes in server-sitemap.xml
- Ensure programmatic SEO pages are included in sitemaps
- Use sitemap index for organizing multiple sitemaps
- Configure sitemap generation in next-sitemap.config.js
- Generate sitemaps during build process with postbuild script
- Set appropriate changefreq and priority values
- Include lastmod dates for all URLs
- Reference all sitemaps in robots.txt
- Submit sitemaps to Google Search Console after deployment
- Update sitemaps when adding new routes or content types

## Canonical URLs
- Every page must have a canonical URL implemented
- Use the `alternates.canonical` property in Next.js metadata
- Base all canonical URLs on the baseUrl in schema-config.ts
- Include canonical URLs in OpenGraph metadata as the `url` property
- For dynamic pages, construct canonical URLs with the appropriate slug
- Ensure canonical URLs use the https protocol
- Avoid duplicate content by maintaining consistent canonical URLs
- For paginated content, point canonical URLs to the first page
- Test canonical URLs with search engine tools

## Hreflang Implementation
- All pages must include appropriate hreflang tags
- Use the `alternates.languages` property in Next.js metadata
- Use the utility functions in src/lib/hreflang.ts to generate hreflang metadata
- Always include a self-referencing hreflang tag for each language version
- Use ISO language codes (e.g., "en" for English, "es" for Spanish)
- For region-specific content, use language-region codes (e.g., "en-US", "en-GB")
- Ensure bidirectional linking between all language versions
- Keep the HTML lang attribute consistent with hreflang values
- Configure supported languages in the schema-config.ts file
- Test hreflang implementation using search engine tools

# Development Workflow

## Version Control
- Use descriptive commit messages
- Follow conventional commits format
- Keep PRs focused and manageable
- Review code before merging

## Testing
- Write unit tests for components
- Test accessibility
- Test responsive design
- Verify performance metrics

## Documentation
- Document complex components
- Maintain README.md
- Document API endpoints
- Include JSDoc comments for complex functions

## Package Management
- Use npm as package manager
- Keep dependencies updated
- Avoid conflicting package versions
- Document any specific version requirements

## Pre-Change Checks
- Review existing project files before making changes
- Understand the current implementation and architecture
- Check for dependencies and potential impacts
- Verify compatibility with existing code patterns
